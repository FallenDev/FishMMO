# /etc/nginx/nginx.conf (or included from it)

# NGINX user and worker processes. 'auto' is usually a good default.
user  nginx; # Change to 'www-data' if you are on Debian/Ubuntu
worker_processes  auto;

# Path to the NGINX error log. 'warn' level is generally sufficient for production.
error_log  /var/log/nginx/error.log warn;
# Path to the NGINX PID file.
pid        /var/run/nginx.pid;

# Events block: Defines how NGINX handles connections.
events {
    # Maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections  1024;
    # multi_accept on; # Uncomment if expecting a very high rate of new connections
}

################################################################################
# HTTP/HTTPS Configuration
# This block handles all standard web traffic (HTTP, HTTPS, WebSockets).
################################################################################
http {
    # Standard MIME types for serving files.
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Access log format. Includes X-Forwarded-For for real client IP.
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Path to the NGINX access log.
    access_log  /var/log/nginx/access.log  main;

    # Optimizations for sending files.
    sendfile        on;
    #tcp_nopush     on; # uncomment to enable. Optimizes TCP packet sending.

    # Connection timeout settings.
    keepalive_timeout  65;

    # Gzip compression settings for faster delivery of web content.
    gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # --------------------------------------------------------------------------
    # UPSTREAM DEFINITIONS (Backend Servers)
    # Define your backend application servers running on localhost.
    # --------------------------------------------------------------------------

    # Backend for your WebGL Client (ASP.NET server)
    upstream web_client_server {
        server 127.0.0.1:8000;
        # For multiple instances, add more 'server' lines here:
        # server 127.0.0.1:8001;
    }

    # Backend for your IPFetch service
    upstream ipfetch_server {
        server 127.0.0.1:8080;
    }

    # Backend for your Patcher service
    upstream patcher_server {
        server 127.0.0.1:8090;
    }

    # Backends for your WebSocket Game Servers
    upstream login_game_server {
        server 127.0.0.1:7770;
    }
    upstream world_game_server {
        server 127.0.0.1:7780;
    }
    upstream scene_game_server {
        server 127.0.0.1:7781;
    }

    # --------------------------------------------------------------------------
    # COMMON PROXY SETTINGS
    # These headers are passed to all proxied backends unless overridden.
    # --------------------------------------------------------------------------
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme; # Tells backend if original request was HTTP or HTTPS
    proxy_connect_timeout 75s; # How long NGINX waits to establish connection with backend
    proxy_send_timeout 75s;    # How long NGINX waits for backend to accept data
    proxy_read_timeout 75s;    # How long NGINX waits for backend to send data

    # --------------------------------------------------------------------------
    # WEBSOCKET UPGRADE MAPPING
    # Essential for NGINX to correctly proxy WebSocket connections.
    # --------------------------------------------------------------------------
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # --------------------------------------------------------------------------
    # SERVER BLOCKS (Virtual Hosts)
    # Each server block handles requests for a specific domain.
    # --------------------------------------------------------------------------

    # WEBGL CLIENT SERVER
    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name web.com;
        return 301 https://$host$request_uri;
    }
    # HTTPS server for WebGL client
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name web.com;

        # SSL/TLS Configuration - REPLACE WITH YOUR ACTUAL CERTIFICATE PATHS
        ssl_certificate /etc/letsencrypt/live/fullchain.pem; # Path to your fullchain certificate
        ssl_certificate_key /etc/letsencrypt/live/privkey.pem; # Path to your private key
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20";
        ssl_prefer_server_ciphers on;

        # Proxy all requests for this domain to the ASP.NET WebGL backend
        location / {
            proxy_pass http://web_client_server;
            # Common proxy headers are inherited from the http block
        }
    }

    # IPFETCH SERVER (ipfetch.com)
    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name ipfetch.com;
        return 301 https://$host$request_uri;
    }
    # HTTPS server for IPFetch
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ipfetch.com;

        # SSL/TLS Configuration - REPLACE WITH YOUR ACTUAL CERTIFICATE PATHS
        ssl_certificate /etc/letsencrypt/live/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20";
        ssl_prefer_server_ciphers on;

        # Proxy specific paths to the IPFetch backend
        location /loginserver {
            proxy_pass http://ipfetch_server/loginserver;
            # Common proxy headers are inherited
        }
        location /patchserver {
            proxy_pass http://ipfetch_server/patchserver;
            # Common proxy headers are inherited
        }
        # Deny access to other paths on ipfetch.com
        location / {
            return 404; # Not Found
        }
    }

    # PATCH SERVER (patcher.com)
    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name patcher.com;
        return 301 https://$host$request_uri;
    }
    # HTTPS server for Patcher
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name patcher.com;

        # SSL/TLS Configuration - REPLACE WITH YOUR ACTUAL CERTIFICATE PATHS
        ssl_certificate /etc/letsencrypt/live/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20";
        ssl_prefer_server_ciphers on;

        # Proxy all requests to the Patcher backend
        location / {
            proxy_pass http://patcher_server;
            # If serving very large files directly without buffering, consider:
            # proxy_buffering off;
            # Common proxy headers are inherited
        }
    }

    # LOGIN GAME SERVER - WebSocket Proxy
    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name loginserver.com;
        return 301 https://$host$request_uri;
    }
    # HTTPS server for Login Game Server (WebSocket)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name loginserver.com;

        # SSL/TLS Configuration - REPLACE WITH YOUR ACTUAL CERTIFICATE PATHS
        ssl_certificate /etc/letsencrypt/live/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20";
        ssl_prefer_server_ciphers on;

        location / {
            # This is the key change: proxy_pass still uses http:// for the backend
            proxy_pass http://login_game_server; # <-- This stays http://
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            # Common proxy headers are inherited
        }
    }

    # WORLD GAME SERVER - WebSocket Proxy
    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name worldserver.com;
        return 301 https://$host$request_uri;
    }
    # HTTPS server for World Game Server (WebSocket)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name worldserver.com;

        # SSL/TLS Configuration - REPLACE WITH YOUR ACTUAL CERTIFICATE PATHS
        ssl_certificate /etc/letsencrypt/live/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20";
        ssl_prefer_server_ciphers on;

        location / {
            proxy_pass http://world_game_server; # <-- This stays http://
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }

    # SCENE GAME SERVER - WebSocket Proxy
    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name sceneserver.com;
        return 301 https://$host$request_uri;
    }
    # HTTPS server for Scene Game Server (WebSocket)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name sceneserver.com;

        # SSL/TLS Configuration - REPLACE WITH YOUR ACTUAL CERTIFICATE PATHS
        ssl_certificate /etc/letsencrypt/live/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20";
        ssl_prefer_server_ciphers on;

        location / {
            proxy_pass http://scene_game_server; # <-- This stays http://
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
}