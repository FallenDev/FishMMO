using System.Security;
using SecureRemotePassword;

namespace FishMMO.Client
{
	public class ClientSrpData
	{
		/// <summary>
		/// The SRP client instance used for authentication operations.
		/// </summary>
		public SrpClient SrpClient { get; private set; }
		/// <summary>
		/// The ephemeral values generated by the client for SRP authentication.
		/// </summary>
		public SrpEphemeral ClientEphemeral { get; private set; }
		/// <summary>
		/// The current SRP session, containing proof and session keys.
		/// </summary>
		public SrpSession Session { get; private set; }

		/// <summary>
		/// Constructs a new ClientSrpData instance and initializes the SRP client and ephemeral values.
		/// </summary>
		/// <param name="parameters">SRP parameters used for cryptographic operations.</param>
		public ClientSrpData(SrpParameters parameters)
		{
			SrpClient = new SrpClient(parameters);
			ClientEphemeral = SrpClient.GenerateEphemeral();
		}

		/// <summary>
		/// Generates a salt and verifier for the given username and password.
		/// Used for account registration or password changes.
		/// </summary>
		/// <param name="username">The username for which to generate the verifier.</param>
		/// <param name="password">The password for which to generate the verifier.</param>
		/// <param name="salt">Output salt value.</param>
		/// <param name="verifier">Output verifier value.</param>
		public void GetSaltAndVerifier(string username, string password, out string salt, out string verifier)
		{
			salt = SrpClient.GenerateSalt();
			string privateKey = SrpClient.DerivePrivateKey(salt, username, password);
			verifier = SrpClient.DeriveVerifier(privateKey);
		}

		/// <summary>
		/// Generates a client proof for SRP authentication using provided credentials and server ephemeral value.
		/// </summary>
		/// <param name="username">The username for authentication.</param>
		/// <param name="password">The password for authentication.</param>
		/// <param name="salt">The salt used for deriving the private key.</param>
		/// <param name="serverPublicEphemeral">The server's public ephemeral value.</param>
		/// <param name="proof">Output client proof value.</param>
		/// <returns>True if proof generation succeeded; otherwise, false.</returns>
		public bool GetProof(string username, string password, string salt, string serverPublicEphemeral, out string proof)
		{
			string privateKey = SrpClient.DerivePrivateKey(salt, username, password);
			try
			{
				Session = SrpClient.DeriveSession(ClientEphemeral.Secret,
												  serverPublicEphemeral,
												  salt,
												  username,
												  privateKey);
				proof = Session.Proof;
				return true;
			}
			catch (SecurityException e)
			{
				proof = e.Message;
				return false;
			}
		}

		/// <summary>
		/// Verifies the server's proof to complete the SRP authentication session.
		/// </summary>
		/// <param name="serverProof">The proof value provided by the server.</param>
		/// <param name="result">Output result message indicating success or failure.</param>
		/// <returns>True if verification succeeded; otherwise, false.</returns>
		public bool Verify(string serverProof, out string result)
		{
			try
			{
				// Verifies the session using the client's ephemeral public value, session, and server proof.
				SrpClient.VerifySession(ClientEphemeral.Public, Session, serverProof);
				result = "Srp Successfully verified session.";
				return true;
			}
			catch (SecurityException e)
			{
				result = e.Message;
				return false;
			}
		}
	}
}